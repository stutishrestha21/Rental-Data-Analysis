teams_seeded <- teams %>%
arrange(desc(score)) %>%
mutate(seed = row_number())
# Adding a "bye" team if the number of teams is not a power of two
if (nrow(teams_seeded) %% 2 != 0) {
teams_seeded <- rbind(teams_seeded, data.frame(TEAM = "Bye", score = 0, seed = nrow(teams_seeded) + 1))
}
# Creating the bracket data
round_1 <- data.frame(
round = 1,
match = 1:(nrow(teams_seeded)%%32),
team1 = teams_seeded$TEAM[1:(nrow(teams_seeded)%%32)],
team2 = teams_seeded$TEAM[((nrow(teams_seeded)%%32) + 1):nrow(teams_seeded)]
)
round_2 <- data.frame(
round = 2,
match = 1:(nrow(round_1)/2),
team1 = ifelse(round_1$match %% 2 == 1, round_1$team1, round_1$team2),
team2 = ifelse(round_1$match %% 2 == 1, round_1$team2, round_1$team1)
)
round_3 <- data.frame(
round = 3,
match = 1:(nrow(round_2)/2),
team1 = ifelse(round_2$match %% 2 == 1, round_2$team1, round_2$team2),
team2 = ifelse(round_2$match %% 2 == 1, round_2$team2, round_2$team1)
)
round_4 <- data.frame(
round = 4,
match = 1:(nrow(round_3)/2),
team1 = ifelse(round_3$match %% 2 == 1, round_3$team1, round_3$team2),
team2 = ifelse(round_3$match %% 2 == 1, round_3$team2, round_3$team1)
)
round_5 <- data.frame(
round = 5,
match = 1:(nrow(round_4)/2),
team1 = ifelse(round_4$match %% 2 == 1, round_4$team1, round_4$team2),
team2 = ifelse(round_4$match %% 2 == 1, round_4$team2, round_4$team1)
)
championship <- data.frame(
round = 6,
match = 1,
team1 = ifelse(round_5$match %% 2 == 1, round_5$team1, round_5$team2),
team2 = ifelse(round_5$match %% 2 == 1, round_5$team2, round_5$team1)
)
# Combine all the rounds into one dataframe
bracket_data <- bind_rows(round_1, round_2, round_3, round_4, round_5, championship)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
if (nrow(results) == 0) {
return(NULL) # return NULL if no rows match the filtering criteria
}
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
print(max(bracket_data$round))
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
# Create a dataframe with team names and scores
teams <- read.csv('tournament_data.csv') %>%
select(TEAM, KENPOM.ADJUSTED.EFFICIENCY,
BARTTORVIK.ADJUSTED.EFFICIENCY,
TURNOVER..,POINTS.PER.POSSESSION.DEFENSE, FREE.THROW..) %>%
distinct(TEAM, .keep_all = TRUE)
teams$score <- teams$KENPOM.ADJUSTED.EFFICIENCY *
teams$BARTTORVIK.ADJUSTED.EFFICIENCY *
teams$TURNOVER.. / teams$POINTS.PER.POSSESSION.DEFENSE * teams$FREE.THROW..
teams <- teams %>%
mutate(score = round(score,4))
# Seeding the teams based on their scores
teams_seeded <- teams %>%
arrange(desc(score)) %>%
mutate(seed = row_number())
# Adding a "bye" team if the number of teams is not a power of two
if (nrow(teams_seeded) %% 2 != 0) {
teams_seeded <- rbind(teams_seeded, data.frame(TEAM = "Bye", score = 0, seed = nrow(teams_seeded) + 1))
}
# Creating the bracket data
round_1 <- data.frame(
round = 1,
match = 1:(nrow(teams_seeded)%%32),
team1 = teams_seeded$TEAM[1:(nrow(teams_seeded)%%32)],
team2 = teams_seeded$TEAM[((nrow(teams_seeded)%%32) + 1):nrow(teams_seeded)]
)
round_2 <- data.frame(
round = 2,
match = 1:(nrow(round_1)/2),
team1 = ifelse(round_1$match %% 2 == 1, round_1$team1, round_1$team2),
team2 = ifelse(round_1$match %% 2 == 1, round_1$team2, round_1$team1)
)
round_3 <- data.frame(
round = 3,
match = 1:(nrow(round_2)/2),
team1 = ifelse(round_2$match %% 2 == 1, round_2$team1, round_2$team2),
team2 = ifelse(round_2$match %% 2 == 1, round_2$team2, round_2$team1)
)
round_4 <- data.frame(
round = 4,
match = 1:(nrow(round_3)/2),
team1 = ifelse(round_3$match %% 2 == 1, round_3$team1, round_3$team2),
team2 = ifelse(round_3$match %% 2 == 1, round_3$team2, round_3$team1)
)
round_5 <- data.frame(
round = 5,
match = 1:(nrow(round_4)/2),
team1 = ifelse(round_4$match %% 2 == 1, round_4$team1, round_4$team2),
team2 = ifelse(round_4$match %% 2 == 1, round_4$team2, round_4$team1)
)
championship <- data.frame(
round = 6,
match = 1,
team1 = ifelse(round_5$match %% 2 == 1, round_5$team1, round_5$team2),
team2 = ifelse(round_5$match %% 2 == 1, round_5$team2, round_5$team1)
)
# Combine all the rounds into one dataframe
bracket_data <- bind_rows(round_1, round_2, round_3, round_4, round_5, championship)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
if (nrow(results) == 0) {
return(NULL) # return NULL if no rows match the filtering criteria
}
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
print(max(bracket_data$round))
ui <- fluidPage(
titlePanel("Tournament Results"),
sidebarLayout(
sidebarPanel(),
mainPanel(
tableOutput("results_table")
)
)
)
server <- function(input, output) {
output$results_table <- renderTable({
table_results(bracket_data)
})
}
shinyApp(ui, server)
View(bracket_data)
View(championship)
View(bracket_data)
library(shiny); runApp('C:/Users/Eirik/OneDrive/College/Senior/Data 332/mi_valley/mi_valley.R')
library(tidyverse)
library(tidytext)
library(dplyr)
library(lubridate)
library(ggplot2)
library(shiny)
library(leaflet)
library(caret)
library(class)
library(viridis)
rm(list = ls())
library(tidyverse)
library(tidytext)
library(dplyr)
library(lubridate)
library(ggplot2)
library(shiny)
library(leaflet)
library(caret)
library(class)
library(viridis)
rm(list = ls())
library(tidyverse)
library(tidytext)
library(dplyr)
library(lubridate)
library(ggplot2)
library(shiny)
library(leaflet)
library(caret)
library(class)
library(viridis)
rm(list = ls())
library(tidyverse)
library(tidytext)
library(dplyr)
library(lubridate)
library(ggplot2)
library(shiny)
library(leaflet)
library(caret)
library(class)
library(viridis)
rm(list = ls())
library(tidyverse)
library(tidytext)
library(dplyr)
library(lubridate)
library(ggplot2)
library(shiny)
library(leaflet)
library(caret)
library(class)
library(viridis)
rm(list = ls())
library(tidyverse)
library(tidytext)
library(dplyr)
library(lubridate)
library(ggplot2)
library(shiny)
library(leaflet)
library(caret)
library(class)
library(viridis)
rm(list = ls())
setwd("C:/Users/Eirik/OneDrive/College/Senior/Data 332/final_project")
setwd("C:/Users/Eirik/OneDrive/College/Senior/Data 332/final_project")
# read csv file
df <- read.csv("data/hotels_motels.csv") %>%
separate(the_geom, into = c(NA, "longitude", "latitude"), sep = " ")
# remove parentheses from latitude and longitude columns
df$latitude <- gsub("\\(|\\)", "", df$latitude)
df$longitude <- gsub("\\(|\\)", "", df$longitude)
# convert latitude and longitude columns to numeric values
df$latitude <- as.numeric(df$latitude)
df$longitude <- as.numeric(df$longitude)
#Converting this date to year
df$Year <- str_sub(df$BusinessStartDate,1,4)
# Define the UI
ui <- fluidPage(
titlePanel("Stays in New Orleans"),
mainPanel(
tabsetPanel(
tabPanel("Introduction",
textOutput("intro_text")),
tabPanel("Map of Hotels, Motels, and Rentals",
fluidRow(
column(12, textOutput('map_comment')),
column(12, leafletOutput("map"))
)),
tabPanel("Count by Business Type",
fluidRow(
column(12, textOutput('busn_type_comment')),
column(12, plotOutput("busn_type_plot", width = '800px',
height = '600px'))
)),
tabPanel("Business Start Date",
fluidRow(
column(12, textOutput('start_date_comment')),
column(12, plotOutput("start_date", width = '800px',
height = '600px'))
)),
tabPanel("Major Players in the Business",
fluidRow(
column(12, textOutput('major_players_comment')),
column(12, plotOutput("major_players", width = '800px',
height = '600px'))
)),
tabPanel("Popular zip code",
fluidRow(
column(12, textOutput('zip_comment')),
column(3,
selectInput(
"Year_select","Select a year",
choices = c("2000","2001","2002","2003","2004","2005","2006","2007","2008","2009",
"2010","2011","2012","2013","2014","2015","2016","2017","2018","2019",
"2020","2021","2022","2023"))),
column(9, plotOutput("zip_data"))
)),
tabPanel("LLM Prediction Model",
fluidRow(
column(12, textOutput("llm_model")),
column(12, textOutput("llm_citation"))
)),
tabPanel("Our Prediction Model",
fluidRow(
column(12, textOutput('knn_model_comment')),
column(6,textInput("latitude_input", "Latitude:",
placeholder = "Enter latitude...")),
column(6, textInput("longitude_input", "Longitude:",
placeholder = "Enter longitude..."))),
fluidRow(
column(12, actionButton("predict_button", "Predict"))),
fluidRow(
column(12, verbatimTextOutput("predicted_output"))
))
)))
# Define the server
server <- function(input, output) {
#Intro paragraph explaining project
output$intro_text <-renderText({
"
We found the data on data.gov. It contains information on hotels and motels in the LA neighborhood of New Orleans.
We created a shiny app to begin the analysis.
We divided latitude and longitude, which made it easier for us to locate various places on the map.
To determine the number of hotels and motels operating there, we then counted different company categories and created a bar graph.
We used a company start date and kept track of how many companies launched over the course of a decade in order to conduct further analyses.
To determine the terms that were utilized in the business type, we used emotional analysis.
The most repeated words were then counted once we had separated the words.
When we examine the top 5 companies in the Major Player in the Business graph,
we can see that Sonder is the largest chain when compared to the others. Additionally,
we developed a prediction model based on latitude and longitude that requests the user's input in order
to inform them of the location of each organization.
"
})
# Count by busn type
output$busn_type_plot <- renderPlot({
# pivot showing count of each busn type
busn_type <- df %>%
group_by(BusinessType) %>%
summarise(count = n())
ggplot(busn_type, aes(x = BusinessType, y = count)) +
geom_bar(stat = "identity",fill="deeppink3",color="black") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1,
size = 10),
plot.title = element_text(size = 20)) +
labs(x = "Business Type", y = "Count", title = "Business Type Counts") +
ggtitle("Business Type Counts")
})
# Map of Places
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = ~latitude, lng = ~longitude)
})
# Business Start Date
output$start_date <- renderPlot({
start_date <- df %>%
mutate(Year = lubridate::year(BusinessStartDate)) %>%
group_by(Year, BusinessType) %>%
summarise(count = n()) %>%
arrange(Year, BusinessType) %>%
group_by(BusinessType) %>%
mutate(cumulative_count = cumsum(count))
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType, group = BusinessType)) +
geom_line(linewidth = 1.1) +
scale_color_viridis(discrete = TRUE, option = "H") +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
})
# The Major Players in NOLA
output$major_players <- renderPlot({
word_counts <- df %>%
unnest_tokens(word, BusinessName) %>%
count(word) %>%
arrange(desc(n))
string_values <- c('sonder', 'marriott', 'hilton', 'holiday', 'hyatt')
majors <- subset(word_counts, word %in% string_values)
ggplot(majors, aes(x = word, y = n)) +
geom_bar(stat = "identity",fill= "peachpuff3", color="peachpuff3")
})
# Popular zip code and start date (which zip code got popular??)
output$zip_data <- renderPlot({
popular_zip <- df %>%
filter(Year %in% input$Year_select)%>%
group_by(Zip, BusinessStartDate) %>%
summarise(count = n())
ggplot(popular_zip, aes(x = Zip, y = count)) +
geom_bar(stat = "identity",fill="pink",color="gray") +
ggtitle("Count of Hotels in Each Zip Code")+
labs(title = "Interactive Bar Chart", x = "Zip Code", y = "Count") +
theme_minimal()
})
#Model
output$llm_model <- renderText({
data <- df
data$year <- substr(data$BusinessStartDate, 1, 4)
# Split data into training and testing sets
set.seed(123)
trainIndex <- createDataPartition(data$BusinessType, p = 0.8, list = FALSE)
training <- data[trainIndex, ]
testing <- data[-trainIndex, ]
# Split the response variables
training$latitude <- as.numeric(training$latitude)
training$longitude <- as.numeric(training$longitude)
# Convert 'year' to character in both training and testing datasets
training$year <- as.numeric(training$year)
testing$year <- as.numeric(testing$year)
# Train the model separately for latitude and longitude
model_latitude <- train(latitude ~ year + BusinessType,
method = "rpart",
data = training)
model_longitude <- train(longitude ~ year + BusinessType,
method = "rpart",
data = training)
# Predict the future locations for each BusinessType
predictions_latitude <- predict(model_latitude, newdata = testing)
predictions_longitude <- predict(model_longitude, newdata = testing)
# Specify the latitude and longitude
lat <- predictions_latitude[1]
lng <- predictions_longitude[1]
# Create a string with the values of lat and lng
result <- paste("Latitude: ", lat, "\nLongitude: ", lng)
# Return the result as the output text
return(result)
})
output$llm_citation <- renderText({
'
APA Citation from Bing AI
"Built In. (n.d.). Regression Trees: How to Get Started. Built In.
https://builtin.com/data-science/regression-tree"
"Carnegie Mellon University. (n.d.). Lecture 10: Regression Trees.
Carnegie Mellon University. https://www.stat.cmu.edu/~cshalizi/350-2006/lecture-10.pdf"
Explanation
"Regression trees are a variant of decision trees that aim to
predict outcomes we consider real numbers — such as the optimal prescription
dosage, the cost of gas next year or the number of expected Covid cases this
winter. Regression trees divide the data into subsets, that is, branches,
nodes, and leaves. Like decision trees, regression trees select splits that
decrease the dispersion of target attribute values. Thus, the target attribute
values can be predicted from their mean values in the leaves."
'
})
observeEvent(input$predict_button, {
dataset <- df[, c("latitude", "longitude", "BusinessType")]
# Split the dataset into training and testing sets
set.seed(123) # Set seed for reproducibility
train1_indices <- sample(nrow(dataset), nrow(dataset)*0.7) # 70% for training
train1_data <- dataset[train1_indices, ]
test1_data <- dataset[-train1_indices, ]
# Set the number of neighbors for the KNN model
k <- 3
# Train the KNN model
knn_model <- knn(train1_data[, c("latitude", "longitude")],
test1_data[, c("latitude", "longitude")],
train1_data$BusinessType, k)
# Evaluate the model
accuracy <- sum(knn_model == test1_data$BusinessType) /
length(test1_data$BusinessType)
cat("Accuracy:", accuracy, "\n")
# Make predictions on new data
# Get user input
latitude <- as.numeric(input$latitude_input)
longitude <- as.numeric(input$longitude_input)
# Validate input
if (is.na(latitude) || is.na(longitude)) {
output$predicted_output <- renderPrint("Invalid input. Please enter numeric values.")
} else {
# Make predictions on new data
new_data <- data.frame(latitude = latitude,
longitude = longitude)
predicted_types <- knn(train1_data[, c("latitude", "longitude")], new_data,
train1_data$BusinessType, k)
# Display predicted business types
output$predicted_output <- renderPrint({
cat("Predicted Business Type:", predicted_types, "\n")
predicted_types
})
}})
output$map_comment <- renderText({
'Insert description'
})
output$busn_type_comment <- renderText({
'Insert description'
})
output$start_date_comment <- renderText({
'Insert description'
})
output$major_players_comment <- renderText({
'Insert description'
})
output$zip_comment <- renderText({
'Insert description'
})
output$knn_model_comment <- renderText({
'Insert description'
})
}
shinyApp(ui, server)
